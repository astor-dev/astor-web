---
import "swiper/css";
import "swiper/css/grid";
import "swiper/css/pagination";
import "swiper/css/navigation";
import "swiper/css/scrollbar";
import "swiper/css/effect-fade";
import "swiper/css/autoplay";
import "~styles/global.css";
import NavBar from "~components/Nav/NavBar";
import BreadcrumbNavigator from "~components/Breadcrumb/BreadcrumbNavigator";
import { SkeletonProvider } from "~components/Skeleton/SkeletonProvider";
import Seo from "~components/Seo/Seo.astro";
import type { PostEntry, PostTitleAndId, Tag } from "~types/post.type";
import { repositoryContainer } from "~modules/repository.module";
import {
  POST_REPOSITORY,
  type PostRepository,
} from "~modules/repositories/posts/PostRepository";
import type { SeriesAndCount } from "~types/post.type";
interface Props {
  title?: string;
  image?: string;
}

const postRepository = repositoryContainer.get<PostRepository>(POST_REPOSITORY);
const tags: Tag[] = await postRepository.getAllTags();
const posts: PostTitleAndId[] = await postRepository.getAllPostTitleAndId();
const series: SeriesAndCount[] = await postRepository.getAllSeriesAndCount();

const { title, image } = Astro.props;
const currentPath = Astro.url.pathname;
---

<!doctype html>
<html lang="ko" data-theme="light" class="w-full">
  <Seo title={title} image={image} />
  <body class="flex w-full flex-col text-skin-base">
    <!-- Google Tag Manager (noscript) -->
    <noscript
      ><iframe
        src="https://www.googletagmanager.com/ns.html?id=GTM-MFD92VH3"
        height="0"
        width="0"
        style="display:none;visibility:hidden"></iframe></noscript
    >
    <!-- End Google Tag Manager (noscript) -->
    <SkeletonProvider>
      <NavBar
        client:load
        tags={tags}
        posts={posts}
        series={series}
        pathname={currentPath}
        client:load
      />
      <slot name="hero" />
      <!-- 메인 콘텐츠 영역: 반응형 컨테이너 적용 예시 -->
      <main
        class="relative mt-16  print:mt-0 w-full flex-1 bg-skin-background px-[5dvw] 2xl:px-[15dvw]"
      >
        <!-- Navbar를 보여주는 경우 Navbar+12px 띄워줌 -->
        <!-- {shouldShowBreadcrumb && <BreadcrumbNavigator pathname={currentPath} client:load />} -->
        <!-- 페이지별 콘텐츠는 slot을 통해 들어옴 -->
        <slot />
      </main>
      <slot name="footer" />
    </SkeletonProvider>
  </body><script is:inline data-astro-rerun>
    /** Create a progress indicator at the top */
    function createProgressBar() {
      const progressContainer = document.createElement("div");
      progressContainer.className =
        "progress-container fixed top-0 z-[999] h-0.5 w-full";

      const progressBar = document.createElement("div");
      progressBar.className = "progress-bar h-0.5 w-0 bg-skin-accent";
      progressBar.id = "myBar";

      progressContainer.appendChild(progressBar);
      document.body.appendChild(progressContainer);
    }
    createProgressBar();

    /** Update the progress bar when user scrolls */
    function updateScrollProgress() {
      document.addEventListener("scroll", () => {
        const winScroll =
          document.body.scrollTop || document.documentElement.scrollTop;
        const height =
          document.documentElement.scrollHeight -
          document.documentElement.clientHeight;
        const scrolled = (winScroll / height) * 100;
        const myBar = document.getElementById("myBar");
        if (myBar) {
          myBar.style.width = scrolled + "%";
        }
      });
    }
    updateScrollProgress();

    /** Attaches copy buttons to code blocks in the document,
     * allowing users to copy code easily. */
    function attachCopyButtons() {
      const copyButtonLabel = "Copy";
      const codeBlocks = Array.from(document.querySelectorAll("pre"));

      for (const codeBlock of codeBlocks) {
        const wrapper = document.createElement("div");
        wrapper.style.position = "relative";
        wrapper.classList.add("group");

        const copyButton = document.createElement("button");
        copyButton.className = `
  opacity-0 pointer-events-none
  group-hover:opacity-100 group-hover:pointer-events-auto
  transition-opacity duration-200

  absolute right-3 top-2
  flex items-center gap-1
  rounded-lg px-3 py-1.5 text-sm font-medium

  bg-skin-fill bg-opacity-70 hover:bg-opacity-90
  text-skin-accent shadow-md backdrop-blur
`;


        copyButton.innerHTML = copyButtonLabel;
        codeBlock.setAttribute("tabindex", "0");
        codeBlock.appendChild(copyButton);

        // wrap codebock with relative parent element
        codeBlock?.parentNode?.insertBefore(wrapper, codeBlock);
        wrapper.appendChild(codeBlock);

        copyButton.addEventListener("click", async () => {
          await copyCode(codeBlock, copyButton);
        });
      }

      async function copyCode(block, button) {
        const code = block.querySelector("code");
        const text = code?.innerText;

        await navigator.clipboard.writeText(text ?? "");

        // visual feedback that task is completed
        button.innerText = "Copied";

        setTimeout(() => {
          button.innerText = copyButtonLabel;
        }, 1000);
      }
    }
    attachCopyButtons();
  </script>
</html>
