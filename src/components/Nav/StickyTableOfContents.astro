---
import type { MarkdownHeading } from "astro";

interface Props {
  headings: MarkdownHeading[];
  class?: string;
}

const { headings, class: className }: Props = Astro.props;

// headings 배열의 최소 depth를 기준으로 계층적 넘버링 계산 함수
function computeNumbering(headings: MarkdownHeading[]) {
  if (!headings.length) return [];
  const minDepth = Math.min(...headings.map(h => h.depth));
  const counters: number[] = [];
  return headings.map(heading => {
    // 현재 heading의 normalized level (최상위는 0)
    const level = heading.depth - minDepth;
    if (counters.length === level) {
      // 해당 레벨의 첫 번째 항목이면 카운터 추가
      counters.push(1);
    } else {
      // 같은 레벨이면 카운터 증가하고, 더 깊은 레벨은 리셋
      counters[level] = (counters[level] || 0) + 1;
      counters.length = level + 1;
    }
    return { ...heading, numbering: counters.join(".") };
  });
}

const computedHeadings = computeNumbering(headings);
const minDepth = headings.length ? Math.min(...headings.map(h => h.depth)) : 1;
---

<nav class={`toc-container not-prose ${className}`}>
  <div class="bg-white-base ml-4 w-64 rounded-lg">
    <ul class="toc-list overflow-y-auto py-2">
      {
        computedHeadings.map(item => (
          <li
            class="toc-item transition-colors hover:bg-skin-accent/10"
            style={`padding-left: ${(item.depth - minDepth) * 1.2 + 1}rem;`}
          >
            <a
              href={`#${item.slug}`}
              class="block py-2 pr-4 text-sm no-underline"
              data-heading-id={item.slug}
              data-toc-link
            >
              <span class="toc-content">
                <span class="mr-2 text-skin-accent">{item.numbering}</span>
                <span class="text-black-accent">{item.text}</span>
              </span>
            </a>
          </li>
        ))
      }
    </ul>
  </div>
</nav>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const tocContainer = document.querySelector(".toc-container");
    const tocDiv = tocContainer?.querySelector("div");
    const tocItems = document.querySelectorAll(".toc-item");
    let initialTopOffset = 0;
    const SCROLL_OFFSET = 100;
    const HEADER_MARGIN = 20; // 헤더 간 최소 여백

    // 활성 헤더가 변경될 때 목차 내 스크롤 조정
    function scrollActiveItemIntoView(activeLink: Element | null) {
      if (!activeLink || !tocContainer) return;

      const tocList = tocContainer.querySelector(".toc-list");
      if (!tocList) return;

      const activeLi = activeLink.parentElement;
      if (!activeLi) return;

      const listRect = tocList.getBoundingClientRect();
      const activeRect = activeLi.getBoundingClientRect();

      // 활성 항목이 목차 컨테이너를 벗어났는지 확인
      if (
        activeRect.top < listRect.top ||
        activeRect.bottom > listRect.bottom
      ) {
        activeLi.scrollIntoView({ behavior: "smooth", block: "nearest" });
      }
    }

    // 모든 헤더의 위치 정보 수집
    function getHeadingPositions() {
      const headingElements = Array.from(
        document.querySelectorAll(
          "h1[id], h2[id], h3[id], h4[id], h5[id], h6[id]",
        ),
      );

      // 헤더 위치 수집 및 정렬
      const headingPositions = headingElements.map(heading => {
        const id = heading.getAttribute("id") || "";
        const offsetTop = heading.getBoundingClientRect().top + window.scrollY;
        return { id, offsetTop };
      });

      // 마지막 위치는 문서의 끝으로 설정
      headingPositions.push({
        id: "document-end",
        offsetTop: document.body.scrollHeight,
      });

      return headingPositions;
    }

    // 현재 스크롤 위치에 따라 활성화된 헤더 찾기
    function updateActiveHeading() {
      const headingPositions = getHeadingPositions();
      const scrollPosition = Math.round(window.scrollY); // 소수점 반올림

      // 현재 스크롤 위치가 어떤 두 헤더 사이에 있는지 확인
      for (let i = 0; i < headingPositions.length - 1; i++) {
        const currentHeading = headingPositions[i];
        const nextHeading = headingPositions[i + 1];

        // 위치 계산을 정수로 반올림
        const currentTop = Math.round(
          currentHeading.offsetTop - SCROLL_OFFSET - HEADER_MARGIN,
        );
        const nextTop = Math.round(
          nextHeading.offsetTop - SCROLL_OFFSET - HEADER_MARGIN,
        );

        // 약간의 여유 범위를 추가 (2px)
        if (scrollPosition >= currentTop - 2 && scrollPosition < nextTop - 2) {
          // 모든 toc-item에서 active 클래스 제거
          tocItems.forEach(item => {
            item.classList.remove("active");
          });

          // 현재 헤더에 해당하는 목차 항목 활성화
          const activeLink = document.querySelector(
            `.toc-item a[data-heading-id="${currentHeading.id}"]`,
          );

          if (activeLink) {
            activeLink.parentElement?.classList.add("active");
          }

          break;
        }
      }

      // 문서 시작 부분에서 첫 번째 헤더 전에 있는 경우
      if (
        headingPositions.length > 0 &&
        scrollPosition < headingPositions[0].offsetTop
      ) {
        // 모든 toc-item에서 active 클래스 제거
        tocItems.forEach(item => {
          item.classList.remove("active");
        });

        // 첫 번째 헤더가 있으면 활성화
        if (headingPositions.length > 0) {
          const firstHeadingLink = document.querySelector(
            `.toc-item a[data-heading-id="${headingPositions[0].id}"]`,
          );
          if (firstHeadingLink) {
            firstHeadingLink.parentElement?.classList.add("active");
          }
        }
      }

      // 활성 헤더가 변경될 때마다 스크롤 조정
      const activeLink = document.querySelector(".toc-item.active a");
      scrollActiveItemIntoView(activeLink);
    }

    function updateTocPosition() {
      if (!tocContainer || !tocDiv) return;

      const scrollY = window.scrollY;
      const headerOffset = 200;

      // 초기 위치보다 아래로 스크롤 되었을 때
      if (scrollY >= initialTopOffset - headerOffset) {
        tocDiv.style.position = "fixed";
        tocDiv.style.top = headerOffset + "px";
      } else {
        tocDiv.style.position = "static";
        tocDiv.style.top = "auto";
      }
    }

    // 초기 위치 기억 (페이지 로드 후)
    window.addEventListener("load", () => {
      // 괄호를 명확하게 추가하여 계산 순서 수정
      initialTopOffset =
        (tocContainer?.getBoundingClientRect().top || 0) + window.scrollY;
      updateTocPosition();
      updateActiveHeading(); // 페이지 로드 시 활성 헤더 업데이트
    });

    // 목차 링크 클릭 시 스크롤 위치 조정
    document.querySelectorAll("[data-toc-link]").forEach(link => {
      link.addEventListener(
        "click",
        function (this: HTMLAnchorElement, e: Event) {
          e.preventDefault();
          const targetId = this.getAttribute("href")?.substring(1);
          const targetElement = document.getElementById(targetId || "");

          if (targetElement) {
            // 스크롤 위치 계산을 정수로 반올림
            const targetPosition = Math.round(
              targetElement.getBoundingClientRect().top +
                window.scrollY -
                (SCROLL_OFFSET + HEADER_MARGIN),
            );

            window.scrollTo({
              top: targetPosition,
              behavior: "auto",
            });

            // 클릭한 항목 즉시 활성화
            tocItems.forEach(item => item.classList.remove("active"));
            this.parentElement?.classList.add("active");
          }
        },
      );
    });

    // 스크롤 이벤트에 따라 목차 위치 및 활성 헤더 업데이트
    window.addEventListener("scroll", () => {
      updateTocPosition();
      updateActiveHeading();
    });

    // 페이지 사이즈 변경 시에도 위치 업데이트
    window.addEventListener("resize", () => {
      // 위치 재계산
      initialTopOffset =
        (tocContainer?.getBoundingClientRect().top || 0) + window.scrollY;
      updateTocPosition();
      updateActiveHeading();
    });

    // 정기적으로 위치 확인하여 오류 예방
    setInterval(() => {
      if (window.scrollY === 0 && tocDiv?.style.position === "fixed") {
        tocDiv.style.position = "static";
        tocDiv.style.top = "auto";
      }
    }, 1000);

    // 초기 활성화 헤더 설정
    updateActiveHeading();
  });
</script>

<style>
  .toc-container {
    position: absolute;
    right: 0px;
    width: 280px;
  }

  .toc-list {
    max-height: 50vh;
    scrollbar-gutter: stable;
  }

  .toc-item {
    transition: background-color 0.2s ease;
  }

  .toc-item.active {
    background-color: rgba(var(--color-accent), 0.1);
  }

  .toc-content {
    transition: transform 0.2s ease;
    will-change: transform;
    display: inline-block;
    width: 100%;
  }

  .toc-item.active .toc-content {
    transform: scale(1.03);
  }

  /* 스크롤바가 필요할 때만 표시 */
  .toc-list::-webkit-scrollbar {
    width: 4px;
  }

  .toc-list::-webkit-scrollbar-track {
    background: rgba(var(--color-fill), 0.5);
    border-radius: 2px;
  }

  .toc-list::-webkit-scrollbar-thumb {
    background: rgba(var(--color-accent), 0.7);
    border-radius: 2px;
  }

  /* Firefox를 위한 스크롤바 스타일링 */
  .toc-list {
    scrollbar-width: thin;
    scrollbar-color: rgba(var(--color-accent), 0.7) rgba(var(--color-fill), 0.5);
  }
</style>
