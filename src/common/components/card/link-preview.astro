---
export interface Props {
  url: string;
}

const { url } = Astro.props;

// URL에서 메타데이터 가져오기
let title = '';
let description = '';
let image = '';
let favicon = '';
let domain = '';

try {
  const response = await fetch(url, {
    headers: {
      'User-Agent': 'Mozilla/5.0 (compatible; LinkPreview/1.0)',
    },
    signal: AbortSignal.timeout(10000),
  });

  if (response.ok) {
    const html = await response.text();
    domain = new URL(url).hostname.replace('www.', '');

    // 메타데이터 추출 함수
    const extractMetaContent = (html: string, selectors: string[]): string => {
      for (const selector of selectors) {
        const regex = new RegExp(
          `<meta[^>]*(?:name|property)=["']${selector}["'][^>]*content=["']([^"']*)["']`,
          'i'
        );
        const match = html.match(regex);
        if (match && match[1]) {
          return match[1].trim();
        }
      }
      return '';
    };

    // 파비콘 추출 함수
    const extractFavicon = (html: string, baseUrl: string): string => {
        return `${new URL(baseUrl).origin}/favicon.ico`;
    };

    // URL을 절대 URL로 변환하는 함수
    const convertToAbsoluteUrl = (url: string, baseUrl: string): string => {
      try {
        return new URL(url, baseUrl).href;
      } catch {
        return url;
      }
    };

    title = extractMetaContent(html, ['og:title', 'twitter:title', 'title']) || domain;
    description = extractMetaContent(html, ['og:description', 'twitter:description', 'description']);
    const imageUrl = extractMetaContent(html, ['og:image', 'twitter:image', 'twitter:image:src']);
    image = imageUrl ? convertToAbsoluteUrl(imageUrl, url) : '';
    favicon = extractFavicon(html, url);
  }
} catch (error) {
  console.warn(`Failed to fetch metadata for ${url}:`, error);
  domain = new URL(url).hostname.replace('www.', '');
  title = domain;
}

// 기본값 설정
const displayTitle = title || '제목을 불러올 수 없습니다';
const displayDescription = description || '설명을 불러올 수 없습니다';
const displayImage = image || '/placeholder-image.png';
const displayFavicon = favicon || '/placeholder-favicon.png';
const displayDomain = domain || 'unknown.com';
---

<div class="w-full my-4 md:my-5 border border-gray-200 bg-white overflow-hidden">
  <a 
    href={url} 
    target="_blank" 
    class="block no-underline hover:no-underline focus:no-underline"
    style="text-decoration: none;"
  >
  <div class="grid grid-cols-1 md:grid-cols-[auto_1fr]">      
      <div class="relative bg-gray-200 aspect-[4/3]">
        <img 
          src={displayImage} 
          alt={displayTitle} 
          class="absolute top-0 left-0 w-full h-full md:w-full md:h-full object-cover"
          loading="lazy"
          onerror="this.style.display='none'"
        />
      </div>
      
      <div class="p-2 flex flex-col justify-center">
        <div>
          {/* 제목 */}
          <h3 class="text-base min-h-[3rem] md:text-base md:min-h-[3rem] font-bold text-black-accent line-clamp-2">
            {displayTitle}
          </h3>
          
          {/* 설명 */}
          <p class="text-sm min-h-[2.5rem] md:text-sm md:min-h-[2.5rem] text-gray-600 line-clamp-2">
            {displayDescription}
          </p>
                  
          <div>
            {favicon && (
              <img 
                src={displayFavicon} 
                alt="Favicon" 
                class="w-3 h-3 md:w-3 md:h-3"
                onerror="this.style.display='none'"
              />
            )}
            <span class="text-xs text-gray-600" style="text-decoration: none !important;">
              {displayDomain}
            </span>
          </div>

        </div>
      </div>
    </div>
  </a>
</div>
