---
import ImageWithSkeleton from "~common/components/skeletons/image-with-skeleton";

interface Props {
  title: string;
  imageSrc: string;
  description?: string;
  className?: string;
}
const { title, description, className, imageSrc } = Astro.props;

// description에 ** ** 감싼 부분을 <strong> 태그로 변환 (간단한 정규표현식 사용)
const parsedDescription = description
  ? description
      .replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>")
      .replace(/\n/g, "<br>")
  : "";
---

<!-- 고정 높이(예: 500px)로 적용 -->
<section
  class={`relative w-full h-screen overflow-hidden py-12 md:py-20 mb-3 md:mb-12 text-center ${className ?? ""}`}
>
  <!-- 배경 이미지 감싸는 래퍼: 절대 위치 & 섹션 전체 덮음 -->
  <div class="-z-1 absolute inset-0">
    <ImageWithSkeleton
      src={imageSrc}
      alt="배경 이미지"
      className="h-full w-full object-cover"
      client:load
    />
  </div>
  {/* 어두운 오버레이 */}
  <div class="absolute inset-0 z-10 bg-black opacity-70"></div>

  <!-- 실제 컨텐츠: z-기본값(또는 z-10)으로 배경 위에 표시되도록 -->
  <div
    id="hero-content"
    data-visible="false"
    class="relative z-10 mx-auto max-w-4xl translate-y-5 px-6 opacity-0 transition-all duration-500 will-change-transform data-[visible=true]:translate-y-0 data-[visible=true]:opacity-100"
  >
    <h1
      class="mb-4 text-4xl font-bold leading-tight text-white-accent sm:text-5xl md:text-6xl"
    >
      {title}
    </h1>
    {
      description && (
        <p
          class="mx-auto max-w-2xl text-base font-light leading-relaxed text-white-base sm:text-lg md:text-xl"
          set:html={parsedDescription}
        />
      )
    }
  </div>
</section>

<script>
  if (import.meta.env.SSR === false) {
    document.addEventListener("DOMContentLoaded", () => {
      const hero = document.getElementById("hero-content");
      if (!hero) return;

      const observer = new IntersectionObserver(
        entries => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              hero.dataset.visible = "true";
              observer.unobserve(hero);
            }
          });
        },
        { threshold: 0.1 },
      );

      observer.observe(hero);
    });
  }
</script>
