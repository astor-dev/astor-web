---
import {
  POST_REPOSITORY,
  type PostRepository,
} from "~modules/repositories/posts/PostRepository";
import { repositoryContainer } from "~modules/repository.module";
import type { PostEntry } from "~common/types/post.type";
import type { SeriesEntry } from "~common/types/series.type";
import BlogDefault from "~features/blog/layouts/blog-default.astro";
import SeriesPostItem from "~features/blog/components/series/series-post-item.astro";

export async function getStaticPaths() {
  const postRepository =
    repositoryContainer.get<PostRepository>(POST_REPOSITORY);

  const seriesAndPosts = await postRepository.getAllSeriesAndPosts("asc");
  const paths: {
    params: { series: string };
    props: { series: SeriesEntry; posts: PostEntry[] };
  }[] = [];

  for (const seriesAndPost of seriesAndPosts) {
    paths.push({
      params: { series: seriesAndPost.series.data.id },
      props: { series: seriesAndPost.series, posts: seriesAndPost.posts },
    });
  }
  return paths;
}
const { series, posts } = Astro.props;
---

<BlogDefault
  title={series.data.name + " | 블로그"}
  image={series.data.ogImage}
  currentPath="/blog/series"
>
  <div class="mb-8">
    <h2 class="text-2xl font-bold text-black-accent">
      {series.data.name}
      <span class="text-sm text-black-muted">({posts.length})</span>
    </h2>
  </div>
  {
    posts.length > 0 ? (
      <>
        <ol id="post-list" class="flex flex-col">
          {posts.map((post, index) => (
            <SeriesPostItem post={post} index={index} />
          ))}
        </ol>
      </>
    ) : (
      <p>아직 등록된 포스트가 없습니다.</p>
    )
  }
</BlogDefault>
