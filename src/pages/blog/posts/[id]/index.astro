---
import { repositoryContainer } from "~modules/repository.module";
import {
  POST_REPOSITORY,
  type PostRepository,
} from "~modules/repositories/posts/PostRepository";
import type { PostEntry, SeriesAndPosts } from "~common/types/post.type";
import { remark } from "remark";
import strip from "strip-markdown";
import PostDetail from "~features/blog/layouts/post-detail.astro";

// Props 타입을 명시적으로 정의
interface Props {
  post: PostEntry;
  latestPosts: PostEntry[];
  series?: SeriesAndPosts;
  nextPost: PostEntry | null;
  prevPost: PostEntry | null;
}

export async function getStaticPaths() {
  const postRepository =
    repositoryContainer.get<PostRepository>(POST_REPOSITORY);
  const paginatedPosts = await postRepository.getPosts({
    filter: { draft: false },
    sort: { by: "createdAt", order: "desc" },
  });
  const posts = paginatedPosts.items;
  const latestPosts: PostEntry[] = posts.slice(0, 12);

  // 날짜 기준으로 포스트 정렬 (최신순)

  const result: {
    params: { id: string };
    props: {
      post: PostEntry;
      latestPosts: PostEntry[];
      series: SeriesAndPosts | undefined;
      nextPost: PostEntry | null;
      prevPost: PostEntry | null;
    };
  }[] = [];
  for (const post of posts) {
    let series: SeriesAndPosts | undefined;
    let currentIndex: number | undefined;
    let nextPost: PostEntry | null;
    let prevPost: PostEntry | null;
    if (post.data.seriesId) {
      series = await postRepository.getSeriesAndPosts(post.data.seriesId);
      currentIndex = series.posts.findIndex(p => p.id === post.id);
      prevPost = currentIndex > 0 ? series.posts[currentIndex - 1] : null;
      nextPost =
        currentIndex < series.posts.length - 1
          ? series.posts[currentIndex + 1]
          : null;
    } else {
      currentIndex = posts.findIndex(p => p.id === post.id);
      nextPost = currentIndex > 0 ? posts[currentIndex - 1] : null;
      prevPost =
        currentIndex < posts.length - 1 ? posts[currentIndex + 1] : null;
    }

    result.push({
      params: { id: post.id },
      props: { post, latestPosts, series, nextPost, prevPost },
    });
  }

  return result;
}

// props 타입을 명시적으로 지정
const { post, latestPosts, series, nextPost, prevPost } = Astro.props as Props;
---

<PostDetail
  post={post}
  isAdmin={false}
  latestPosts={latestPosts}
  nextPost={nextPost}
  prevPost={prevPost}
  series={series}
/>
