---
import PostDetail from "~layouts/blog/PostDetail.astro";
import { repositoryContainer } from "~modules/repository.module";
import {
  POST_REPOSITORY,
  type PostRepository,
} from "~modules/repositories/posts/PostRepository";
import type { PostEntry, SeriesAndPosts } from "~types/post.type";
import { remark } from "remark";
import strip from "strip-markdown";

// Props 타입을 명시적으로 정의
interface Props {
  post: PostEntry;
  latestPosts: PostEntry[];
  series?: SeriesAndPosts;
  nextPost: PostEntry | null;
  prevPost: PostEntry | null;
}

export async function getStaticPaths() {
  const postRepository =
    repositoryContainer.get<PostRepository>(POST_REPOSITORY);
  const paginatedPosts = await postRepository.getPosts({ filter: { draft: false }, sort: { by: "createdAt", order: "desc" } });
  const posts = paginatedPosts.items;
  const latestPosts: PostEntry[] = posts.slice(0, 8);

  // 날짜 기준으로 포스트 정렬 (최신순)


  const result : {params: {id: string}, props: {post: PostEntry, latestPosts: PostEntry[], series: SeriesAndPosts | undefined, nextPost: PostEntry | null, prevPost: PostEntry | null}}[] = [];
  for (const post of posts) {
    let series: SeriesAndPosts | undefined;
    let currentIndex: number | undefined;
    let nextPost: PostEntry | null;
    let prevPost: PostEntry | null;
    if (post.data.seriesId) {
      series = await postRepository.getSeriesAndPosts(post.data.seriesId);
      currentIndex = series.posts.findIndex(p => p.id === post.id);
      prevPost = currentIndex > 0 ? series.posts[currentIndex - 1] : null;
      nextPost = currentIndex < series.posts.length - 1 ? series.posts[currentIndex + 1] : null;
    } else {
      currentIndex = posts.findIndex(p => p.id === post.id);
      nextPost = currentIndex > 0 ? posts[currentIndex - 1] : null;
      prevPost = currentIndex < posts.length - 1 ? posts[currentIndex + 1] : null;
    }

    result.push({
      params: { id: post.id },
      props: { post, latestPosts, series, nextPost, prevPost },
    });
  }
  
  return result;
}

// props 타입을 명시적으로 지정
const { post, latestPosts, series, nextPost, prevPost } = Astro.props as Props;

// 메타 데이터 추출
const postTitle = post.data.title;
const postImage = post.data.ogImage;
const postTags = post.data.tags.join(", ");
const postUrl = new URL(Astro.request.url).href;
const postAuthor = post.data.author;
const publishedTime = post.data.createdAt;
const modifiedTime = post.data.updatedAt;

// 포스트 내용으로부터 description 생성 (최대 160자)
let postDescription = "";
try {
  if (post.body) {
    // remark와 strip-markdown을 사용하여 마크다운 제거
    const result = await remark().use(strip).process(post.body);

    const plainText = result.toString();
    postDescription =
      plainText.slice(0, 157) + (plainText.length > 157 ? "..." : "");
  }
} catch (error) {
  console.error("Error generating description:", error);
  // 대체 설명 제공
  postDescription = `${postTitle} - astor의 개발 블로그`;
}
---

<PostDetail
  post={post}
  isAdmin={false}
  latestPosts={latestPosts}
  nextPost={nextPost}
  prevPost={prevPost}
  title={postTitle}
  description={postDescription}
  image={postImage}
  keywords={postTags}
  url={postUrl}
  type="article"
  author={postAuthor}
  publishedTime={publishedTime}
  modifiedTime={modifiedTime}
  series={series}
/>
