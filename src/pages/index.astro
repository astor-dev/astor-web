---
import Layout from "~layouts/BaseLayout.astro";
import { ShootingStarHeader } from "~components/Header/ShootingStarHeader";
import { repositoryContainer } from "~modules/repository.module";
import {
  PROJECT_REPOSITORY,
  type ProjectRepository,
} from "~modules/repositories/projects/ProjectRepository";
import {
  POST_REPOSITORY,
  type PostRepository,
} from "~modules/repositories/posts/PostRepository";
import type { PostEntry, SeriesAndCount, Tag } from "~types/post.type";
import type { ProjectEntry } from "~types/project.type";
import HomeHero from "~components/Hero/HomeHero";
import type { Paginated } from "~types/page.type";
import HomeSeriesCarousel from "~components/Slider/HomeSeriesSlider";
import HomeProjectSlider from "~components/Slider/HomeProjectSlider";
import HomePinnedPostsSlider from "~components/Slider/HomePinnedPostsSlider";
import HistoryTimeline from "~components/HistoryTimeline";
import HomeTagsSlider from "~components/Slider/HomeTagsSlider";
import RecentPostsSection from "~components/Section/RecentPostsSection.astro";

const projectRepository =
  repositoryContainer.get<ProjectRepository>(PROJECT_REPOSITORY);
const postRepository = repositoryContainer.get<PostRepository>(POST_REPOSITORY);

const projects: Paginated<ProjectEntry> = await projectRepository
  .getProjects({
    paging: { page: 0, limit: 5 },
    sort: { field: "endedAt", order: "desc" },
    filter: {
      projectTypes: ["Company-project", "Side-project"],
    },
  })
  .then(res => {
    res.items.sort((a, b) => {
      // 회사 프로젝트가 있는 경우 먼저 정렬
      if (
        a.data.projectType === "Company-project" &&
        b.data.projectType !== "Company-project"
      ) {
        return -1;
      } else if (
        a.data.projectType !== "Company-project" &&
        b.data.projectType === "Company-project"
      ) {
        return 1;
      }
      return 0;
    });
    return res;
  });

// 블로그 데이터 가져오기
const pinnedPosts: PostEntry[] = (
  await postRepository.getPosts({
    filter: { pinned: true, draft: false },
  })
).items;

// 최근 게시글 가져오기
const recentPosts: PostEntry[] = (
  await postRepository.getPosts({
    paging: { page: 1, limit: 6 },
    filter: { draft: false },
  })
).items;

const tags: Tag[] = await postRepository.getAllTags();
const seriesList: SeriesAndCount[] =
  await postRepository.getAllSeriesAndCount();
---

<Layout>
  <Fragment slot="hero">
    <HomeHero client:load />
  </Fragment>
  <div class="mx-auto w-full">
    <section class="mb-16">
      <div class="flex flex-col space-y-4">
        <ShootingStarHeader
          title="시리즈"
          moreLink="/blog/series"
          client:load
        />
        <HomeSeriesCarousel seriesList={seriesList} client:idle />
      </div>
    </section>
    <section class="mb-16">
      <ShootingStarHeader title="주목할만한 글" moreLink="/blog" client:load />
      <HomePinnedPostsSlider pinnedPosts={pinnedPosts} client:idle />
    </section>
    <section class="mb-16">
      <div class="relative">
        <div class="relative z-10 grid grid-cols-1 gap-8 lg:grid-cols-2">
          <section>
            <div class="mb-6">
              <ShootingStarHeader title="활동 히스토리" client:load />
            </div>
            <div>
              <HistoryTimeline client:load />
            </div>
          </section>

          <section>
            <div class="mb-6">
              <ShootingStarHeader
                title="프로젝트 모음"
                moreLink="/projects"
                client:load
              />
            </div>
            <div>
              <HomeProjectSlider projects={projects.items} client:load />
            </div>
          </section>
        </div>
      </div>
    </section>
    <section class="mb-16">
      <div class="mb-6">
        <ShootingStarHeader title="최근 게시글" moreLink="/blog" client:load />
      </div>
      <RecentPostsSection recentPosts={recentPosts} />
    </section>
    <!-- <section class="mb-16">
      <ShootingStarHeader title="인기 태그" moreLink="/blog" client:load />
      <HomeTagsSlider tagList={tags} client:load />
    </section> -->
  </div>
</Layout>
