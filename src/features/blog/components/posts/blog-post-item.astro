---
import { FaClock, FaBookmark, FaUser } from "react-icons/fa";
import type { PostEntry } from "~common/types/post.type";
import dayjs from "dayjs";
import { remark } from "remark";
import strip from "strip-markdown";

import Tag from "~features/blog/components/tags/common-tag";
import HoverableImage from "~common/components/images/hoverable-image";

interface Props extends PostEntry {
  className?: string;
}

const { className = "", data, id, body } = Astro.props;

const formatDate = (date: string) => {
  return dayjs(date).format("YYYY.MM.DD");
};

// 마크다운 본문을 텍스트로 변환
const processedBody = await remark()
  .use(strip)
  .process(body)
  .then(result => result.toString())
  .catch(() => "");

// 태그 개수 제한 설정
const maxTagsToShow = 2;
const visibleTags = data.tags.slice(0, maxTagsToShow);
const remainingTagsCount = data.tags.length - maxTagsToShow;
---

<a
  href={`/blog/posts/${id}`}
  class:list={["group block w-full pr-3 md:py-2", className]}
>
  <article class="my-3 break-all md:my-6">
    {/* 제목 + 내용과 이미지 영역 */}
    <div class="flex items-stretch gap-4 md:gap-6">
      {/* 제목 + 내용 컨테이너 */}
      <div class="flex min-w-0 flex-1 flex-col overflow-hidden">
        <h3
          class="text-[0.9rem] font-bold text-black-accent transition-all duration-300 ease-in-out md:text-xl md:group-hover:text-skin-accent"
        >
          {data.title}
        </h3>
        <p
          class="mt-3 line-clamp-2 text-xs text-black-base md:line-clamp-3 md:text-base"
        >
          {processedBody}
        </p>
      </div>

      {/* 이미지 영역 */}
      <div
        class="relative h-20 w-20 shrink-0 overflow-hidden rounded-md md:h-32 md:w-auto"
        style="aspect-ratio: 4 / 3;"
      >
        <HoverableImage
          src={data.ogImage?.toString() || "/default-blog-image.jpg"}
          alt={data.title}
          client:load
        />
      </div>
    </div>

    {/* 태그 + 메타 정보 영역 */}
    <div class="mt-3 flex items-start gap-4 md:mt-4">
      {/* 태그 영역 (모바일 70%, md: 80%) */}
      <div class="flex min-w-0 flex-[7] flex-wrap gap-1.5 md:flex-[8]">
        {/* 모바일: 제한된 태그 + "+n" */}
        <div class="flex flex-wrap gap-1.5 md:hidden">
          {
            visibleTags.map((tag: string) => (
              <Tag client:load tag={tag} size="xs" theme="secondary" />
            ))
          }
          {
            remainingTagsCount > 0 && (
              <span class="inline-flex items-center rounded-full bg-skin-fill px-1 py-0 text-[10px] font-medium text-black-muted">
                +{remainingTagsCount}
              </span>
            )
          }
        </div>

        {/* 데스크톱: 모든 태그 */}
        <div class="hidden flex-wrap gap-1.5 md:flex">
          {
            data.tags.map((tag: string) => (
              <Tag client:load tag={tag} size="responsive" theme="secondary" />
            ))
          }
        </div>
      </div>

      {/* 메타 정보 (30%) */}
      <div
        class="flex flex-[3] items-center justify-end gap-3 text-[11px] text-black-muted md:flex-[2] md:gap-4 md:text-xs"
      >
        <div class="flex items-center">
          <FaClock
            className="mr-1 h-2.5 w-2.5 opacity-70 md:mr-1.5 md:h-3 md:w-3"
          />
          <time datetime={data.createdAt}>{formatDate(data.createdAt)}</time>
        </div>
      </div>
    </div>
  </article>
</a>
